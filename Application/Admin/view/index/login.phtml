 <?php echo $this->headLink()
                        ->prependStylesheet($this->basePath() . '/public/css/login.css')
 ?>
 <script>
 var src='';
function loimg(){
   Ext.Ajax.request({
            url: "imgcode",    
            async: false,   // ASYNC 是否异步( TRUE 异步 , FALSE 同步)
            success: function(response, opts) {
            	var obj = eval( "(" + response.responseText + ")" );
            	src="../../"+obj.imgSrc;
            }, // 请求成功的回调函数
            failure: function() { 
            	
            }  // 请求失败的回调函数
   });
}        
	
// 定义验证码控件
Ext.define('CheckCode',{  
    extend: 'Ext.form.field.Text',   
    alias: 'widget.checkcode',  
    inputTyle:'codefield',  
    codeUrl:Ext.BLANK_IMAGE_URL,  
    isLoader:true,
    onRender:function(ct,position){  
        this.callParent(arguments);  
        this.codeEl = ct.createChild({ tag: 'img', src: Ext.BLANK_IMAGE_URL});  
        this.codeEl.addCls('x-form-code');  
        this.codeEl.on('click', this.loadCodeImg, this);  
          
        if (this.isLoader) this.loadCodeImg();  
    },  
    alignErrorIcon: function() {  
        this.errorIcon.alignTo(this.codeEl, 'tl-tr', [2, 0]);  
    },   
    loadCodeImg: function() {  
    	loimg();
        this.codeEl.set({ src: src});  
    }  
});
		

Ext.onReady(function(){
	var checkcode = Ext.create('CheckCode',{ 
        fieldCls : 'checkcode-ico',  
        fieldLabel : '验证码',
        name : 'verify',  
        id : 'verify',  
        allowBlank : false,  
        isLoader:true,  
        blankText : '请输入验证码', 
		emptyText: '请输入验证码',
        codeUrl: 'getCode'
     });
						
    Ext.create('Ext.window.Window', {
        title: '用户登录',
        draggable: false,
        closable: false,
		resizable : false,
        layout: 'fit',
        items: { 
        	xtype: 'form',
            id: 'loginform',
			bodyPadding : 10,
            defaultType: 'textfield',
            shrinkWrap: 3,
            bodyCls: 'loginformbg',
            fieldDefaults: {
            	allowBlank: false,
                labelAlign: 'center',
                labelWidth: 50,
                labelSeparator: '',
				vtype : 'alphanum',
				vtypeText : '只能是数字或字母'
         },
         items:[{
                fieldLabel: '用户名',
                name: 'username',
				id:'username',
                emptyText: '请输入用户名',
                fieldCls: 'username-ico'						
        },{
                fieldLabel: '密&nbsp;&nbsp;码',
                name: 'password',
				id:'password',
                emptyText: '请输入密码',
                inputType: 'password',
                fieldCls: 'userpassword-ico'
                    
        },checkcode
        ]},  
		buttons: [{
            text: '登录',
            iconCls: 'Doorin',
            id: 'loginbtn',
            handler: function(){
                // 得到form
                var basic = Ext.getCmp('loginform');
                if (basic.isValid()) {
                    basic.submit({
                        waitMsg: '正在登录,请等待...',
                        clientValidation: false,// 要经过客户端验证的
                        url: 'login',
                        method: 'POST',
                        success: function(form, action){
                        	Ext.Msg.alert(action.result.msg);
                            if (action.result.msg == 'OK') {
                            	localStorage.setItem("LoggedIn", true);
								Ext.Msg.alert('提示', '登录成功，页面正在跳转……');
                                window.location.href=action.result.url;
                            }
                        },
                        failure: function(form, action){
                            Ext.Msg.alert('提示', action.result.msg, function(){
                                basic.reset();
								Ext.getCmp('verify').loadCodeImg();
								Ext.getCmp('username').focus();
                            });
                        }
                    });
                }
            }
        }],
		buttonAlign : 'center',
        listeners: {
            afterRender: function(thisForm, options){
                this.keyNav = Ext.create('Ext.util.KeyNav', this.el, {
                    enter: function(){
                        var btn = Ext.getCmp('loginbtn');
                        btn.handler();
                    },
                    scope: this
                });
            }
        }
    }).show();
 
});
    
    </script>